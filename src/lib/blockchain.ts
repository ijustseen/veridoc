import { ethers } from 'ethers';

// ABI –¥–ª—è VeriDocRegistry –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const VERIDOC_REGISTRY_ABI = [
  "function createDocument(bytes32 documentHash, bool isPublic, uint32 expiresAt, address[] calldata signers, string[] calldata encryptedKeys, address[] calldata accessUsers) external returns (uint256)",
  "function signDocument(uint256 documentId, string calldata signatureBase64) external",
  "function verifyDocumentByHash(bytes32 documentHash) external view returns (bool exists, bool isCompleted, address owner, uint16 currentSignatures, uint16 requiredSignatures)",
  "function getDocumentInfo(uint256 documentId) external view returns (tuple(bytes32 documentHash, address owner, uint32 createdAt, uint32 expiresAt, uint16 requiredSignatures, uint16 currentSignatures, bool isPublic, bool isCompleted), uint16)",
  "function getDocumentSignatures(uint256 documentId) external view returns (address[] memory signers, bytes32[] memory signatureHashes, uint32[] memory signedTimes)",
  "function checkDocumentAccess(uint256 documentId, address user) external view returns (bool canRead, bool canSign, bool isOwner)",
  "function getUserDocuments(address user) external view returns (uint256[] memory ownedDocs, uint256[] memory invitedDocs)",
  "event DocumentCreated(uint256 indexed documentId, bytes32 indexed documentHash, address indexed owner, bool isPublic, uint16 requiredSignatures, uint32 expiresAt)",
  "event DocumentSigned(uint256 indexed documentId, address indexed signer, bytes32 signatureHash, uint32 signedAt, uint16 currentSignatures)",
  "event DocumentCompleted(uint256 indexed documentId, uint16 totalSignatures, uint32 completedAt)"
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
const NETWORK_CONFIG = {
  sepolia: {
    chainId: 11155111,
    name: 'Sepolia',
    rpcUrl: 'https://rpc.sepolia.org',
    contractAddress: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
  },
  hardhat: {
    chainId: 1337,
    name: 'Hardhat',
    rpcUrl: 'http://localhost:8545',
    contractAddress: '', // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  }
};

export interface BlockchainDocument {
  documentId: number;
  documentHash: string;
  owner: string;
  createdAt: number;
  expiresAt: number;
  requiredSignatures: number;
  currentSignatures: number;
  isPublic: boolean;
  isCompleted: boolean;
}

export interface BlockchainSignature {
  signer: string;
  signatureHash: string;
  signedAt: number;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º VeriDoc
 */
export class BlockchainService {
  private provider: ethers.Provider | null = null;
  private signer: ethers.Signer | null = null;
  private contract: ethers.Contract | null = null;
  private networkConfig: any = null;

  constructor(network: 'sepolia' | 'hardhat' = 'sepolia') {
    this.networkConfig = NETWORK_CONFIG[network];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å MetaMask
   */
  async initialize(): Promise<boolean> {
    try {
      if (typeof window !== 'undefined' && window.ethereum) {
        this.provider = new ethers.BrowserProvider(window.ethereum);
        this.signer = await this.provider.getSigner();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
        const network = await this.provider.getNetwork();
        if (Number(network.chainId) !== this.networkConfig.chainId) {
          await this.switchNetwork();
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        await this.loadContractAddress();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        if (this.networkConfig.contractAddress) {
          this.contract = new ethers.Contract(
            this.networkConfig.contractAddress,
            VERIDOC_REGISTRY_ABI,
            this.signer
          );
        }

        return true;
      }
      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ä–≤–∏—Å–∞:', error);
      return false;
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—É—é —Å–µ—Ç—å
   */
  private async switchNetwork(): Promise<void> {
    if (!window.ethereum) return;

    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${this.networkConfig.chainId.toString(16)}` }],
      });
    } catch (switchError: any) {
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
      if (switchError.code === 4902 && this.networkConfig.chainId === 11155111) {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [{
            chainId: '0xaa36a7',
            chainName: 'Sepolia Test Network',
            nativeCurrency: {
              name: 'ETH',
              symbol: 'ETH',
              decimals: 18,
            },
            rpcUrls: ['https://rpc.sepolia.org'],
            blockExplorerUrls: ['https://sepolia.etherscan.io/'],
          }],
        });
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
   */
  private async loadContractAddress(): Promise<void> {
    try {
      const response = await fetch('/contract-addresses.json');
      const addresses = await response.json();
      
      if (this.networkConfig.chainId === 11155111 && addresses.sepolia) {
        this.networkConfig.contractAddress = addresses.sepolia.registry;
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
   */
  async createDocument(
    documentHash: string,
    isPublic: boolean,
    signers: string[] = [],
    encryptedKeys: string[] = [],
    expiresAt: number = 0
  ): Promise<{ success: boolean; documentId?: number; txHash?: string; error?: string }> {
    try {
      if (!this.contract) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ—à –≤ bytes32
      const hashBytes32 = ethers.keccak256(ethers.toUtf8Bytes(documentHash));

      console.log('üîπ –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...');
      console.log('Hash:', hashBytes32);
      console.log('IsPublic:', isPublic);
      console.log('Signers:', signers);

      const tx = await this.contract.createDocument(
        hashBytes32,
        isPublic,
        expiresAt,
        signers,
        encryptedKeys,
        [] // accessUsers - –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
      );

      console.log('üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
      const receipt = await tx.wait();
      console.log('üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π
      const event = receipt.logs.find((log: any) => {
        try {
          const parsed = this.contract!.interface.parseLog(log);
          return parsed?.name === 'DocumentCreated';
        } catch {
          return false;
        }
      });

      if (event) {
        const parsed = this.contract.interface.parseLog(event);
        const documentId = Number(parsed!.args.documentId);
        
        return {
          success: true,
          documentId,
          txHash: tx.hash
        };
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
   */
  async signDocument(
    documentId: number,
    documentHash: string
  ): Promise<{ success: boolean; txHash?: string; error?: string }> {
    try {
      if (!this.contract || !this.signer) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ signer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const message = `Signing document with hash: ${documentHash}`;
      const signature = await this.signer.signMessage(message);

      console.log('üîπ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...');
      console.log('Document ID:', documentId);
      console.log('Signature:', signature);

      const tx = await this.contract.signDocument(documentId, signature);
      console.log('üîπ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
      
      await tx.wait();
      console.log('üîπ –ü–æ–¥–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');

      return {
        success: true,
        txHash: tx.hash
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Ö–µ—à—É
   */
  async verifyDocument(documentHash: string): Promise<{
    exists: boolean;
    isCompleted: boolean;
    owner: string;
    currentSignatures: number;
    requiredSignatures: number;
  }> {
    try {
      if (!this.contract) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const hashBytes32 = ethers.keccak256(ethers.toUtf8Bytes(documentHash));
      const result = await this.contract.verifyDocumentByHash(hashBytes32);

      return {
        exists: result.exists,
        isCompleted: result.isCompleted,
        owner: result.owner,
        currentSignatures: Number(result.currentSignatures),
        requiredSignatures: Number(result.requiredSignatures)
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      return {
        exists: false,
        isCompleted: false,
        owner: '',
        currentSignatures: 0,
        requiredSignatures: 0
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
   */
  async getDocumentInfo(documentId: number): Promise<BlockchainDocument | null> {
    try {
      if (!this.contract) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const result = await this.contract.getDocumentInfo(documentId);
      const doc = result[0]; // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞

      return {
        documentId,
        documentHash: doc.documentHash,
        owner: doc.owner,
        createdAt: Number(doc.createdAt),
        expiresAt: Number(doc.expiresAt),
        requiredSignatures: Number(doc.requiredSignatures),
        currentSignatures: Number(doc.currentSignatures),
        isPublic: doc.isPublic,
        isCompleted: doc.isCompleted
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async getDocumentSignatures(documentId: number): Promise<BlockchainSignature[]> {
    try {
      if (!this.contract) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const result = await this.contract.getDocumentSignatures(documentId);
      const [signers, signatureHashes, signedTimes] = result;

      const signatures: BlockchainSignature[] = [];
      for (let i = 0; i < signers.length; i++) {
        signatures.push({
          signer: signers[i],
          signatureHash: signatureHashes[i],
          signedAt: Number(signedTimes[i])
        });
      }

      return signatures;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserDocuments(userAddress: string): Promise<{
    ownedDocs: number[];
    invitedDocs: number[];
  }> {
    try {
      if (!this.contract) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const result = await this.contract.getUserDocuments(userAddress);
      
      return {
        ownedDocs: result.ownedDocs.map((id: any) => Number(id)),
        invitedDocs: result.invitedDocs.map((id: any) => Number(id))
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return {
        ownedDocs: [],
        invitedDocs: []
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
   */
  async checkDocumentAccess(documentId: number, userAddress: string): Promise<{
    canRead: boolean;
    canSign: boolean;
    isOwner: boolean;
  }> {
    try {
      if (!this.contract) {
        throw new Error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const result = await this.contract.checkDocumentAccess(documentId, userAddress);
      
      return {
        canRead: result.canRead,
        canSign: result.canSign,
        isOwner: result.isOwner
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:', error);
      return {
        canRead: false,
        canSign: false,
        isOwner: false
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  getContractAddress(): string | null {
    return this.networkConfig?.contractAddress || null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
   */
  getNetworkInfo() {
    return this.networkConfig;
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
let blockchainServiceInstance: BlockchainService | null = null;

export function getBlockchainService(): BlockchainService {
  if (!blockchainServiceInstance) {
    blockchainServiceInstance = new BlockchainService();
  }
  return blockchainServiceInstance;
}