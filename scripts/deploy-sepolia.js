const { ethers } = require("hardhat");

async function main() {
  console.log("–î–µ–ø–ª–æ–π VeriDocRegistry –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ Sepolia...");

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const VeriDocRegistry = await ethers.getContractFactory("VeriDocRegistry");

  console.log("–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç...");
  const registry = await VeriDocRegistry.deploy();

  await registry.waitForDeployment();

  const contractAddress = await registry.getAddress();
  console.log("‚úÖ VeriDocRegistry —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É:", contractAddress);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const fs = require('fs');
  const contractConfig = {
    sepolia: {
      registry: contractAddress,
      chainId: 11155111,
    }
  };

  fs.writeFileSync(
    './contract-addresses.json', 
    JSON.stringify(contractConfig, null, 2)
  );

  console.log("üìù –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ contract-addresses.json");

  // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  if (process.env.ETHERSCAN_API_KEY) {
    console.log("‚è≥ –ñ–¥–µ–º –±–ª–æ–∫–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
    await registry.deploymentTransaction().wait(5);

    console.log("üîç –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ Etherscan...");
    try {
      await hre.run("verify:verify", {
        address: contractAddress,
        constructorArguments: [],
      });
      console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!");
    } catch (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
    }
  }

  console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:");
  console.log("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", contractAddress);
  console.log("–°–µ—Ç—å: Sepolia");
  console.log("Chain ID: 11155111");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:", error);
    process.exit(1);
  });